name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: interview-notes-backend
  IMAGE_NAME_FRONTEND: interview-notes-frontend

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false --coverage

    - name: Run backend tests
      run: |
        cd backend
        mvn test

    - name: List frontend directory contents
      run: ls -l frontend && ls -l frontend/public

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: List files in workspace
      run: ls -l

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.backend
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.frontend
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}
        export IMAGE_TAG=${{ github.sha }}
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        
        # Update image tags in manifests
        envsubst < k8s/backend.yaml | kubectl apply -f -
        envsubst < k8s/frontend.yaml | kubectl apply -f -
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/backend -n interview-notes
        kubectl rollout status deployment/frontend -n interview-notes

#  deploy-production:
#    name: Deploy to Production
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.ref == 'refs/heads/main'
#    environment: production
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up kubectl
#      uses: azure/setup-kubectl@v3
#      with:
#        version: 'latest'
#
#    - name: Configure kubectl
#      run: |
#        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
#        export KUBECONFIG=kubeconfig
#
#    - name: Deploy to production
#      run: |
#        export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}
#        export IMAGE_TAG=${{ github.sha }}
#        
#        # Apply Kubernetes manifests
#        kubectl apply -f k8s/namespace.yaml
#        kubectl apply -f k8s/configmap.yaml
#        kubectl apply -f k8s/secret.yaml
#        kubectl apply -f k8s/postgres.yaml
#        kubectl apply -f k8s/redis.yaml
#        
#        # Update image tags in manifests
#        envsubst < k8s/backend.yaml | kubectl apply -f -
#        envsubst < k8s/frontend.yaml | kubectl apply -f -
#        
#        # Wait for deployments to be ready
#        kubectl rollout status deployment/backend -n interview-notes
#        kubectl rollout status deployment/frontend -n interview-notes
#
#    - name: Notify deployment
#      run: |
#        echo "Deployment to production completed successfully!"
#        # Add your notification logic here (Slack, email, etc.) 